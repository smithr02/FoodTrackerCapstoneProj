// <auto-generated />
using System;
using FitTrackerCapStone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitTrackerCapStone.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200816192525_Dbsetup")]
    partial class Dbsetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alt_Measures", b =>
                {
                    b.Property<int>("Alt_MeasuresID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("foodID")
                        .HasColumnType("int");

                    b.Property<string>("measure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.Property<int?>("seq")
                        .HasColumnType("int");

                    b.Property<float>("serving_weight")
                        .HasColumnType("real");

                    b.HasKey("Alt_MeasuresID");

                    b.HasIndex("foodID");

                    b.ToTable("Alt_Measures");
                });

            modelBuilder.Entity("FitTrackerCapStone.Meal", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.HasKey("MealId");

                    b.HasIndex("DietId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("FitTrackerCapStone.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("DietId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FitTrackerCapStone.Models.Diet", b =>
                {
                    b.Property<int>("DietId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("DietId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MealsID")
                        .HasColumnType("int");

                    b.Property<int>("alt_measuresID")
                        .HasColumnType("int");

                    b.Property<string>("brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("consumed_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("food_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("full_nutrientsID")
                        .HasColumnType("int");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("meal_type")
                        .HasColumnType("int");

                    b.Property<int>("ndb_no")
                        .HasColumnType("int");

                    b.Property<float>("nf_calories")
                        .HasColumnType("real");

                    b.Property<float>("nf_cholesterol")
                        .HasColumnType("real");

                    b.Property<float>("nf_dietary_fiber")
                        .HasColumnType("real");

                    b.Property<float>("nf_p")
                        .HasColumnType("real");

                    b.Property<float>("nf_potassium")
                        .HasColumnType("real");

                    b.Property<float>("nf_protein")
                        .HasColumnType("real");

                    b.Property<float>("nf_saturated_fat")
                        .HasColumnType("real");

                    b.Property<float>("nf_sodium")
                        .HasColumnType("real");

                    b.Property<float>("nf_sugars")
                        .HasColumnType("real");

                    b.Property<float>("nf_total_carbohydrate")
                        .HasColumnType("real");

                    b.Property<float>("nf_total_fat")
                        .HasColumnType("real");

                    b.Property<string>("nix_brand_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nix_brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nix_item_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nix_item_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("photoID")
                        .HasColumnType("int");

                    b.Property<int>("serving_qty")
                        .HasColumnType("int");

                    b.Property<string>("serving_unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("serving_weight_grams")
                        .HasColumnType("real");

                    b.Property<int>("source")
                        .HasColumnType("int");

                    b.Property<string>("sub_recipe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tagsID")
                        .HasColumnType("int");

                    b.Property<string>("upc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.HasIndex("MealsID");

                    b.HasIndex("alt_measuresID");

                    b.HasIndex("full_nutrientsID");

                    b.HasIndex("photoID");

                    b.HasIndex("tagsID");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Full_Nutrients", b =>
                {
                    b.Property<int>("Full_NutrientsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("attr_id")
                        .HasColumnType("int");

                    b.Property<int>("foodId")
                        .HasColumnType("int");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("Full_NutrientsID");

                    b.HasIndex("foodId");

                    b.ToTable("Full_Nutrients");
                });

            modelBuilder.Entity("Metadata", b =>
                {
                    b.Property<int>("metaDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("is_raw_food")
                        .HasColumnType("bit");

                    b.HasKey("metaDataID");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "edf29ae9-ad37-4511-88ef-905037225de9",
                            ConcurrencyStamp = "ece829be-4f8d-4627-a9ad-e09f56ad9f41",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Photo", b =>
                {
                    b.Property<int>("photoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("foodID")
                        .HasColumnType("int");

                    b.Property<string>("highres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_user_uploaded")
                        .HasColumnType("bit");

                    b.Property<string>("thumb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("photoID");

                    b.HasIndex("foodID");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Tags", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("food_group")
                        .HasColumnType("int");

                    b.Property<string>("item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("measure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tag_id")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex("FoodId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Alt_Measures", b =>
                {
                    b.HasOne("Food", "food")
                        .WithMany()
                        .HasForeignKey("foodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitTrackerCapStone.Meal", b =>
                {
                    b.HasOne("FitTrackerCapStone.Models.Diet", "Diet")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitTrackerCapStone.Models.Customer", b =>
                {
                    b.HasOne("FitTrackerCapStone.Models.Diet", "Diet")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("Food", b =>
                {
                    b.HasOne("FitTrackerCapStone.Meal", "Meal")
                        .WithMany("Foods")
                        .HasForeignKey("MealsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alt_Measures", "alt_measures")
                        .WithMany()
                        .HasForeignKey("alt_measuresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Full_Nutrients", "full_nutrients")
                        .WithMany()
                        .HasForeignKey("full_nutrientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photo", "photo")
                        .WithMany()
                        .HasForeignKey("photoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tags", "tags")
                        .WithMany()
                        .HasForeignKey("tagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Full_Nutrients", b =>
                {
                    b.HasOne("Food", "food")
                        .WithMany()
                        .HasForeignKey("foodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metadata", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithOne("metadata")
                        .HasForeignKey("Metadata", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Photo", b =>
                {
                    b.HasOne("Food", "food")
                        .WithMany()
                        .HasForeignKey("foodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tags", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
